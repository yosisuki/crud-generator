package [packageName].rest.web.controller;

import com.tiket.tix.common.libraries.BeanMapper;
import com.tiket.tix.common.rest.web.model.request.MandatoryRequest;
import com.tiket.tix.common.rest.web.model.response.BaseResponse;
import com.tiket.tix.common.rest.web.model.response.CommonResponse;
import [packageName].entity.constant.ApiPath;
import [packageName].entity.constant.enums.ResponseCode;
import [packageName].entity.dao.[className];
import [packageName].rest.web.model.request.[className]Request;
import [packageName].rest.web.model.response.[className]Response;
import [packageName].service.api.[className]Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.async.DeferredResult;
import springfox.documentation.annotations.ApiIgnore;

@RestController
@RequestMapping("[classNameLowerFirst]")
@Api(value = "[classNameTitle]")
public class [className]Controller {

  private static final Logger LOGGER = LoggerFactory.getLogger([className]Controller.class);

  @Autowired
  private [className]Service [classNameLowerFirst]Service;

  @ModelAttribute
  public MandatoryRequest getMandatoryParameter(HttpServletRequest request) {
    return (MandatoryRequest) request.getAttribute("mandatory");
  }

  @ApiOperation(value = "Get.[classNameLowerFirst]", notes = "Put all mandatory parameter")
  @RequestMapping(path = ApiPath.ID, method = RequestMethod.GET)
  public DeferredResult<BaseResponse<[className]Response>> find[className]ById(
      @PathVariable("id") String id,
      @ApiIgnore @Valid @ModelAttribute MandatoryRequest mandatoryRequest) {
    LOGGER.info("find[className]ById Request mandatoryRequest = {}, id = {}",
        mandatoryRequest, id);

    DeferredResult<BaseResponse<[className]Response>> deferred = new DeferredResult<>();

    this.[classNameLowerFirst]Service.find[className]ById(mandatoryRequest, id)
        .map(this::to[className]Response)
        .map([classNameLowerFirst]Response -> CommonResponse
            .constructResponse(ResponseCode.SUCCESS.getCode(),
                ResponseCode.SUCCESS.getMessage(), null, [classNameLowerFirst]Response))
        .subscribe(deferred::setResult, deferred::setErrorResult);

    return deferred;
  }

  @ApiOperation(value = "Get.[classNameLowerFirst]s (Paginated)", notes = "Put all mandatory parameter")
  @RequestMapping(method = RequestMethod.GET)
  public DeferredResult<BaseResponse<Page<[className]Response>>> findAll[className]sByStoreId(
      @ApiIgnore @Valid @ModelAttribute MandatoryRequest mandatoryRequest, @RequestParam Integer
      page,
      @RequestParam Integer limit) {
    LOGGER.info(
        "findAll[className]sByStoreId Request mandatoryRequest = {}, page = {}, limit = {}",
        mandatoryRequest, page, limit);

    DeferredResult<BaseResponse<Page<[className]Response>>> deferred = new DeferredResult<>();

    this.[classNameLowerFirst]Service
        .findAll[className]sByStoreId(mandatoryRequest, page, limit)
        .map(this::toPage[className]Response)
        .map([classNameLowerFirst]Responses -> CommonResponse
            .constructResponse(ResponseCode.SUCCESS.getCode(), ResponseCode.SUCCESS.getMessage(),
                null, [classNameLowerFirst]Responses))
        .subscribe(deferred::setResult, deferred::setErrorResult);

    return deferred;
  }

  @RequestMapping(method = RequestMethod.POST)
  public DeferredResult<BaseResponse<[className]Response>> create[className](
      @ApiIgnore @Valid @ModelAttribute MandatoryRequest mandatoryRequest, @RequestBody
      [className]Request [classNameLowerFirst]Request) {
    LOGGER.info(
        "create[className] Request mandatoryRequest = {}, [classNameLowerFirst]Request = {}",
        mandatoryRequest, [classNameLowerFirst]Request);

    DeferredResult<BaseResponse<[className]Response>> deferred = new DeferredResult<>();

    this.[classNameLowerFirst]Service
        .create[className](mandatoryRequest, this.to[className]([classNameLowerFirst]Request))
        .map(this::to[className]Response)
        .map([classNameLowerFirst]Response -> CommonResponse
            .constructResponse(ResponseCode.SUCCESS.getCode(), ResponseCode.SUCCESS.getMessage(),
                null, [classNameLowerFirst]Response))
        .subscribe(deferred::setResult, deferred::setErrorResult);

    return deferred;
  }

  @RequestMapping(path = ApiPath.ID, method = RequestMethod.DELETE)
  public DeferredResult<BaseResponse<Boolean>> delete[className]ById(
      @ApiIgnore @Valid @ModelAttribute MandatoryRequest mandatoryRequest,
      @PathVariable("id") String id) {
    LOGGER.info(
        "delete[className]ById Request mandatoryRequest = {}, id = {}",
        mandatoryRequest, id);

    DeferredResult<BaseResponse<Boolean>> deferred = new DeferredResult<>();

    this.[classNameLowerFirst]Service.delete[className]ById(mandatoryRequest, id)
        .map(isSuccess -> CommonResponse
            .constructResponse(ResponseCode.SUCCESS.getCode(), ResponseCode.SUCCESS.getMessage(),
                null, isSuccess))
        .subscribe(deferred::setResult, deferred::setErrorResult);

    return deferred;
  }

  private [className] to[className]([className]Request [classNameLowerFirst]Request) {
    return BeanMapper.map([classNameLowerFirst]Request, [className].class);
  }

  private [className]Response to[className]Response([className] [classNameLowerFirst]) {
    return BeanMapper.map([classNameLowerFirst], [className]Response.class);
  }

  private Page<[className]Response> toPage[className]Response(
      Page<[className]> [classNameLowerFirst]s) {
    return [classNameLowerFirst]s
        .map([classNameLowerFirst] -> BeanMapper.map([classNameLowerFirst], [className]Response.class));
  }
}
